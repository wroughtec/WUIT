/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutters: $grid-gutter-widths) {
  padding-right: ($gutter / 2);
  padding-left:  ($gutter / 2);
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      width: $container-max-width;
      max-width: 100%;
    }
  }
}

@mixin make-gutters($gutters: $grid-gutter-widths) {
  padding-right: ($gutter / 2);
  padding-left:  ($gutter / 2);
}

@mixin make-row($gutters: $grid-gutter-widths) {
  display: flex;
  margin-right: ($gutter / -2);
  margin-left:  ($gutter / -2);

  flex-wrap: wrap;
}

@mixin make-col-ready($gutters: $grid-gutter-widths) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: .0625rem; // Prevent collapsing
  padding-right: ($gutter / 2);
  padding-left:  ($gutter / 2);
}

@mixin make-col-equal() {
  width: initial;
  max-width: 100%;

  flex-grow: 1;
  flex-basis: 0;
}
@mixin make-col-auto() {
  width: auto;

  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: auto;
}


@mixin make-col($size, $columns: $grid-columns) {
  max-width: percentage($size / $columns);
  // width: percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.

  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: percentage($size / $columns);
  // Removed shorthand so as to avoid some IE 10/11 bugs
  // flex: 0 0 percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}
